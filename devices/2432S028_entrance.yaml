#####Substitutions#####
substitutions:
  name: esphome-web-73df2c
  friendly_name: ESPHome 2432S028 73df2c 玄関
###############

#####Basic#####
esphome:
  name: ${name}
  friendly_name: ${friendly_name}

# 共通WiFi設定
<<: !include ../common/wifi.yaml


#####Custom#####
<<: !include ../common/2432s028.yaml

###Colors
color:
  - id: ha_blue
    hex: 51c0f2
  - id: red
    red: 100%
  - id: blue
    blue: 100%
  - id: green
    green: 100%
  - id: white
    red: 100%
    green: 100%
    blue: 100%
  - id: black
    red: 0%
    green: 0%
    blue: 0%
  - id: yellow
    red: 100%
    green: 100%
    blue: 0%

###Displays
###縦置き横置きなどはrotationを変更
display:
  - <<: !include ../common/2432s028_display.yaml
    rotation: 0
    lambda_globals:
      - |-
        auto draw_weather_icon = [&](auto &it, int x, int y, text_sensor::TextSensor *condition_sensor) {
          // センサーがまだ値を受信していない場合に備える
          if (!condition_sensor->has_state()) {
            it.print(x + 40, y + 40, id(roboto20), id(white), TextAlign::CENTER, "?");
            return;
          }
          std::string condition = condition_sensor->state;
          if (condition == "sunny") { it.image(x, y, id(weather_sunny)); }
          else if (condition == "clear-night") { it.image(x, y, id(weather_clear_night)); }
          else if (condition == "cloudy") { it.image(x, y, id(weather_cloudy)); }
          else if (condition == "partlycloudy") { it.image(x, y, id(weather_partlycloudy)); }
          else if (condition == "rainy") { it.image(x, y, id(weather_rainy)); }
          else if (condition == "pouring") { it.image(x, y, id(weather_pouring)); }
          else if (condition == "lightning-rainy") { it.image(x, y, id(weather_lightning_rainy)); }
          else if (condition == "snowy") { it.image(x, y, id(weather_snowy)); }
          else if (condition == "snowy-rainy") { it.image(x, y, id(weather_snowy_rainy)); }
          else if (condition == "windy" || condition == "windy-variant") { it.image(x, y, id(weather_windy_variant)); }
          else if (condition == "fog") { it.image(x, y, id(weather_fog)); }
          else if (condition == "hail") { it.image(x, y, id(weather_hail)); }
          else if (condition == "lightning") { it.image(x, y, id(weather_lightning)); }
          else { it.image(x, y, id(weather_cloudy)); }
        };
    pages:
      - id: page1
        lambda: |-
          it.rectangle(0, 0, 320, 240, id(blue));
          it.print(it.get_width() / 2, 100, id(roboto20), id(white), TextAlign::BOTTOM_CENTER, "Hello World!");
          
          it.printf(it.get_width() / 2, 140, id(roboto20), id(green), TextAlign::TOP_CENTER, "Touch X: %.0f", id(touch_x_val));
          it.printf(it.get_width() / 2, 160, id(roboto20), id(red), TextAlign::TOP_CENTER, "Touch Y: %.0f", id(touch_y_val));
          it.filled_circle(id(touch_x_val), id(touch_y_val), 10, id(yellow));
      - id: page2
        lambda: |-

          // 画面中央に区切り線を描画
          it.line(160, 20, 160, 220, id(white));

          // --- 今日の天気 (画面左側) ---
          it.print(80, 15, id(roboto16), id(white), TextAlign::TOP_CENTER, "Today");
          draw_weather_icon(it, 40, 40, id(forecast_day0_condition));
          if (id(forecast_day0_condition_jp).has_state()) {
            it.print(80, 120, id(roboto16), id(white), TextAlign::TOP_CENTER, id(forecast_day0_condition_jp).state.c_str());
          }
          it.printf(80, 150, id(roboto20), id(white), TextAlign::TOP_CENTER, "%.0f / %.0f ℃", id(forecast_day0_temp_max).state, id(forecast_day0_temp_min).state);
          it.printf(80, 185, id(roboto16), id(white), TextAlign::TOP_CENTER, "降水確率%.0f%%", id(forecast_day0_precip_prob).state);

          // --- 明日の天気 (画面右側) ---
          it.print(240, 15, id(roboto16), id(white), TextAlign::TOP_CENTER, "Next");
          draw_weather_icon(it, 200, 40, id(forecast_day1_condition));
          if (id(forecast_day1_condition_jp).has_state()) {
            it.print(240, 120, id(roboto16), id(white), TextAlign::TOP_CENTER, id(forecast_day1_condition_jp).state.c_str());
          }
          it.printf(240, 150, id(roboto20), id(white), TextAlign::TOP_CENTER, "%.0f / %.0f ℃", id(forecast_day1_temp_max).state, id(forecast_day1_temp_min).state);
          it.printf(240, 185, id(roboto16), id(white), TextAlign::TOP_CENTER, "降水確率%.0f%%", id(forecast_day1_precip_prob).state);
      - id: page3
        lambda: |-
          // 項目数と画面幅
          const int count = 6;
          const int screen_w = it.get_width();   // 320
          const int screen_h = it.get_height();  // 240
          const int col_w = screen_w / count;    // 320/6 ≒ 53px

          // 共通 Y 座標
          const int icon_y    = 20;
          const int temp_y    = 70;
          const int humid_y   = 100;
          // 各列の中心 X を計算
          for (int idx = 2; idx < 8; idx++) {
            int col = idx - 2;                                 // 0～5
            int center_x = col * col_w + col_w / 2;           // 各列中央

            // 1) 天気アイコン
            // draw_weather_icon(it, x, y, pointer to text_sensor)
            switch (idx) {
              case 2: draw_weather_icon(it, center_x - 16, icon_y, id(forecast_day2_condition)); break;
              case 3: draw_weather_icon(it, center_x - 16, icon_y, id(forecast_day3_condition)); break;
              case 4: draw_weather_icon(it, center_x - 16, icon_y, id(forecast_day4_condition)); break;
              case 5: draw_weather_icon(it, center_x - 16, icon_y, id(forecast_day5_condition)); break;
              case 6: draw_weather_icon(it, center_x - 16, icon_y, id(forecast_day6_condition)); break;
              case 7: draw_weather_icon(it, center_x - 16, icon_y, id(forecast_day7_condition)); break;
            }

            // 2) 最高/最低気温
            switch (idx) {
              case 2:
                it.printf(center_x, temp_y, id(roboto14), id(white), TextAlign::TOP_CENTER,
                  "%.0f/%.0f℃", id(forecast_day2_temp_max).state, id(forecast_day2_temp_min).state);
                it.printf(center_x, humid_y, id(roboto12), id(white), TextAlign::TOP_CENTER,
                  "%.0f%%", id(forecast_day2_humidity).state);
                break;
              case 3:
                it.printf(center_x, temp_y, id(roboto14), id(white), TextAlign::TOP_CENTER,
                  "%.0f/%.0f℃", id(forecast_day3_temp_max).state, id(forecast_day3_temp_min).state);
                it.printf(center_x, humid_y, id(roboto12), id(white), TextAlign::TOP_CENTER,
                  "%.0f%%", id(forecast_day3_humidity).state);
                break;
              case 4:
                it.printf(center_x, temp_y, id(roboto14), id(white), TextAlign::TOP_CENTER,
                  "%.0f/%.0f℃", id(forecast_day4_temp_max).state, id(forecast_day4_temp_min).state);
                it.printf(center_x, humid_y, id(roboto12), id(white), TextAlign::TOP_CENTER,
                  "%.0f%%", id(forecast_day4_humidity).state);
                break;
              case 5:
                it.printf(center_x, temp_y, id(roboto14), id(white), TextAlign::TOP_CENTER,
                  "%.0f/%.0f℃", id(forecast_day5_temp_max).state, id(forecast_day5_temp_min).state);
                it.printf(center_x, humid_y, id(roboto12), id(white), TextAlign::TOP_CENTER,
                  "%.0f%%", id(forecast_day5_humidity).state);
                break;
              case 6:
                it.printf(center_x, temp_y, id(roboto14), id(white), TextAlign::TOP_CENTER,
                  "%.0f/%.0f℃", id(forecast_day6_temp_max).state, id(forecast_day6_temp_min).state);
                it.printf(center_x, humid_y, id(roboto12), id(white), TextAlign::TOP_CENTER,
                  "%.0f%%", id(forecast_day6_humidity).state);
                break;
              case 7:
                it.printf(center_x, temp_y, id(roboto14), id(white), TextAlign::TOP_CENTER,
                  "%.0f/%.0f℃", id(forecast_day7_temp_max).state, id(forecast_day7_temp_min).state);
                it.printf(center_x, humid_y, id(roboto12), id(white), TextAlign::TOP_CENTER,
                  "%.0f%%", id(forecast_day7_humidity).state);
                break;
            }
          }


###Fonts
font:
  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 300
    id: roboto16
    size: 16
    glyphsets:
      - GF_Latin_Core
    glyphs:
      - "%" # パーセント
      - "快晴(夜)曇霧雹雷雨一全部豪雪みぞれ強風異常気象不明降水確率" # 日本語の天気名
      - "TodayNext" # ラベル
      - "0123456789" # 数字
      - " /" # スラッシュと半角スペース

  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 400
    id: roboto20
    size: 20
    glyphsets:
      - GF_Latin_Core
    glyphs:
      - "℃"

  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 300
    id: roboto12
    size: 12
    glyphs:
      - "℃" 
      - "0123456789"

  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 300
    id: roboto14
    size: 14
    glyphs:
      - "%" 
      - "0123456789"

###Global Variables
globals:
  - id: touch_x_val
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: touch_y_val
    type: float
    restore_value: no
    initial_value: '0.0'

###Images
image:
  - file: mdi:weather-night   #夜晴れ
    id: weather_clear_night
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-cloudy   #曇り
    id: weather_cloudy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-fog   #霧
    id: weather_fog
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-hail   #雹
    id: weather_hail
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-lightning   #雷
    id: weather_lightning
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-lightning-rainy   #雷雨
    id: weather_lightning_rainy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-partly-cloudy   #部分的に曇り
    id: weather_partlycloudy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-pouring   #土砂降り
    id: weather_pouring
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-rainy   #雨
    id: weather_rainy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-snowy   #雪
    id: weather_snowy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-snowy-rainy   #みぞれ
    id: weather_snowy_rainy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-sunny   #晴れ
    id: weather_sunny
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-windy-variant   #曇りと強風,強風
    id: weather_windy_variant
    type: grayscale
    transparency: alpha_channel
    resize: 80x80

###Interval
interval:
  - interval: 5s # 5秒間隔で実行
    then:
      # main_displayの次のページを表示します (最後まで行ったら自動で先頭に戻ります)
      - display.page.show_next: main_display

# Sensorの共通テンプレート定義
.sensor_common: &sensor_common
  platform: homeassistant
  entity_id: sensor.daily_forecast_data
  attribute: forecast_data

###Sensors
sensor:
  # day0
  - <<: *sensor_common
    filters:
      - json:
          path: "$[0].precip_prob"
    unit_of_measurement: "%"
    id: forecast_day0_precip_prob
  - <<: *sensor_common
    filters:
      - json:
          path: "$[0].temp_max"
    unit_of_measurement: "°C"
    id: forecast_day0_temp_max
  - <<: *sensor_common
    filters:
      - json:
          path: "$[0].temp_min"
    unit_of_measurement: "°C"
    id: forecast_day0_temp_min
  - <<: *sensor_common
    filters:
      - json:
          path: "$[0].humidity"
    unit_of_measurement: "%"
    id: forecast_day0_humidity
  # day1
  - <<: *sensor_common
    filters:
      - json:
          path: "$[1].precip_prob"
    unit_of_measurement: "%"
    id: forecast_day1_precip_prob
  - <<: *sensor_common
    filters:
      - json:
          path: "$[1].temp_max"
    unit_of_measurement: "°C"
    id: forecast_day1_temp_max
  - <<: *sensor_common
    filters:
      - json:
          path: "$[1].temp_min"
    unit_of_measurement: "°C"
    id: forecast_day1_temp_min
  - <<: *sensor_common
    filters:
      - json:
          path: "$[1].humidity"
    unit_of_measurement: "%"
    id: forecast_day1_humidity
  # day2
  - <<: *sensor_common
    filters:
      - json:
          path: "$[2].precip_prob"
    unit_of_measurement: "%"
    id: forecast_day2_precip_prob
  - <<: *sensor_common
    filters:
      - json:
          path: "$[2].temp_max"
    unit_of_measurement: "°C"
    id: forecast_day2_temp_max
  - <<: *sensor_common
    filters:
      - json:
          path: "$[2].temp_min"
    unit_of_measurement: "°C"
    id: forecast_day2_temp_min
  - <<: *sensor_common
    filters:
      - json:
          path: "$[2].humidity"
    unit_of_measurement: "%"
    id: forecast_day2_humidity
  # day3
  - <<: *sensor_common
    filters:
      - json:
          path: "$[3].precip_prob"
    unit_of_measurement: "%"
    id: forecast_day3_precip_prob
  - <<: *sensor_common
    filters:
      - json:
          path: "$[3].temp_max"
    unit_of_measurement: "°C"
    id: forecast_day3_temp_max
  - <<: *sensor_common
    filters:
      - json:
          path: "$[3].temp_min"
    unit_of_measurement: "°C"
    id: forecast_day3_temp_min
  - <<: *sensor_common
    filters:
      - json:
          path: "$[3].humidity"
    unit_of_measurement: "%"
    id: forecast_day3_humidity
  # day4
  - <<: *sensor_common
    filters:
      - json:
          path: "$[4].precip_prob"
    unit_of_measurement: "%"
    id: forecast_day4_precip_prob
  - <<: *sensor_common
    filters:
      - json:
          path: "$[4].temp_max"
    unit_of_measurement: "°C"
    id: forecast_day4_temp_max
  - <<: *sensor_common
    filters:
      - json:
          path: "$[4].temp_min"
    unit_of_measurement: "°C"
    id: forecast_day4_temp_min
  - <<: *sensor_common
    filters:
      - json:
          path: "$[4].humidity"
    unit_of_measurement: "%"
    id: forecast_day4_humidity
  # day5
  - <<: *sensor_common
    filters:
      - json:
          path: "$[5].precip_prob"
    unit_of_measurement: "%"
    id: forecast_day5_precip_prob
  - <<: *sensor_common
    filters:
      - json:
          path: "$[5].temp_max"
    unit_of_measurement: "°C"
    id: forecast_day5_temp_max
  - <<: *sensor_common
    filters:
      - json:
          path: "$[5].temp_min"
    unit_of_measurement: "°C"
    id: forecast_day5_temp_min
  - <<: *sensor_common
    filters:
      - json:
          path: "$[5].humidity"
    unit_of_measurement: "%"
    id: forecast_day5_humidity
  # day6
  - <<: *sensor_common
    filters:
      - json:
          path: "$[6].precip_prob"
    unit_of_measurement: "%"
    id: forecast_day6_precip_prob
  - <<: *sensor_common
    filters:
      - json:
          path: "$[6].temp_max"
    unit_of_measurement: "°C"
    id: forecast_day6_temp_max
  - <<: *sensor_common
    filters:
      - json:
          path: "$[6].temp_min"
    unit_of_measurement: "°C"
    id: forecast_day6_temp_min
  - <<: *sensor_common
    filters:
      - json:
          path: "$[6].humidity"
    unit_of_measurement: "%"
    id: forecast_day6_humidity
  # day7
  - <<: *sensor_common
    filters:
      - json:
          path: "$[7].precip_prob"
    unit_of_measurement: "%"
    id: forecast_day7_precip_prob
  - <<: *sensor_common
    filters:
      - json:
          path: "$[7].temp_max"
    unit_of_measurement: "°C"
    id: forecast_day7_temp_max
  - <<: *sensor_common
    filters:
      - json:
          path: "$[7].temp_min"
    unit_of_measurement: "°C"
    id: forecast_day7_temp_min
  - <<: *sensor_common
    filters:
      - json:
          path: "$[7].humidity"
    unit_of_measurement: "%"
    id: forecast_day7_humidity

###Text Sensor
text_sensor:
  # day0
  - <<: *sensor_common
    filters:
      - json:
          path: "$[0].condition"
    id: forecast_day0_condition
  - <<: *sensor_common
    filters:
      - json:
          path: "$[0].condition_jp"
    id: forecast_day0_condition_jp
  # day1
  - <<: *sensor_common
    filters:
      - json:
          path: "$[1].condition"
    id: forecast_day1_condition
  - <<: *sensor_common
    filters:
      - json:
          path: "$[1].condition_jp"
    id: forecast_day1_condition_jp
  # day2
  - <<: *sensor_common
    filters:
      - json:
          path: "$[2].condition"
    id: forecast_day2_condition
  - <<: *sensor_common
    filters:
      - json:
          path: "$[2].condition_jp"
    id: forecast_day2_condition_jp
  # day3
  - <<: *sensor_common
    filters:
      - json:
          path: "$[3].condition"
    id: forecast_day3_condition
  - <<: *sensor_common
    filters:
      - json:
          path: "$[3].condition_jp"
    id: forecast_day3_condition_jp
  # day4
  - <<: *sensor_common
    filters:
      - json:
          path: "$[4].condition"
    id: forecast_day4_condition
  - <<: *sensor_common
    filters:
      - json:
          path: "$[4].condition_jp"
    id: forecast_day4_condition_jp
  # day5
  - <<: *sensor_common
    filters:
      - json:
          path: "$[5].condition"
    id: forecast_day5_condition
  - <<: *sensor_common
    filters:
      - json:
          path: "$[5].condition_jp"
    id: forecast_day5_condition_jp
  # day6
  - <<: *sensor_common
    filters:
      - json:
          path: "$[6].condition"
    id: forecast_day6_condition
  - <<: *sensor_common
    filters:
      - json:
          path: "$[6].condition_jp"
    id: forecast_day6_condition_jp
  # day7
  - <<: *sensor_common
    filters:
      - json:
          path: "$[7].condition"
    id: forecast_day7_condition
  - <<: *sensor_common
    filters:
      - json:
          path: "$[7].condition_jp"
    id: forecast_day7_condition_jp

###Touch Screens
touchscreen:
  - <<: !include ../common/2432s028_touch.yaml
    on_touch:
      lambda: |-
        id(touch_x_val) = touch.x;
        id(touch_y_val) = touch.y;
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d", touch.x, touch.y, touch.x_raw, touch.y_raw);
    on_release:
      lambda: |-
        []() {
        };

###############
