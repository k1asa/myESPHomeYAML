#----- Device: 2432S028 玄関 -----
packages:
  - !include ../common/common_base.yaml
  - !include ../common/2432s028.yaml

###Colors
color:
  - id: ha_blue
    hex: 51c0f2
  - id: red
    red: 100%
  - id: blue
    blue: 100%
  - id: green
    green: 100%
  - id: white
    red: 100%
    green: 100%
    blue: 100%
  - id: black
    red: 0%
    green: 0%
    blue: 0%
  - id: yellow
    red: 100%
    green: 100%
    blue: 0%

###Displays
display:
  - id: !extend hw_main_display
    rotation: 180
    pages:
      # - id: page1
      #   lambda: |-
      #     it.rectangle(0, 0, 320, 240, id(blue));
      #     it.print(it.get_width() / 2, 100, id(roboto20), id(white), TextAlign::BOTTOM_CENTER, "Hello World!");
      #     it.printf(it.get_width() / 2, 140, id(roboto20), id(green), TextAlign::TOP_CENTER, "Touch X: %.0f", id(touch_x_val));
      #     it.printf(it.get_width() / 2, 160, id(roboto20), id(red), TextAlign::TOP_CENTER, "Touch Y: %.0f", id(touch_y_val));
      #     it.filled_circle(id(touch_x_val), id(touch_y_val), 10, id(yellow));
          
      - id: page2
        lambda: |-
          // 共通: ヘルパーと座標計算
          // ページ全体で共通に使う処理は先にまとめます。
          auto utf8_from_code = [](int cp) -> std::string {
            std::string s;
            if (cp <= 0x7F) {
              s.push_back((char)cp);
            } else if (cp <= 0x7FF) {
              s.push_back(0xC0 | ((cp >> 6) & 0x1F));
              s.push_back(0x80 | (cp & 0x3F));
            } else if (cp <= 0xFFFF) {
              s.push_back(0xE0 | ((cp >> 12) & 0x0F));
              s.push_back(0x80 | ((cp >> 6) & 0x3F));
              s.push_back(0x80 | (cp & 0x3F));
            } else {
              s.push_back(0xF0 | ((cp >> 18) & 0x07));
              s.push_back(0x80 | ((cp >> 12) & 0x3F));
              s.push_back(0x80 | ((cp >> 6) & 0x3F));
              s.push_back(0x80 | (cp & 0x3F));
            }
            return s;
          };
          const int screen_w = it.get_width();
          const int left_x = screen_w / 4;
          const int right_x = screen_w * 3 / 4;

          // 画面中央に縦に線を引く
          it.line(160, 20, 160, 220, id(white));

          //day0 今日
          it.print(left_x, 5, id(roboto16), id(white), TextAlign::TOP_CENTER, "Today");

          // 天気conditionからglyphコードを決定し、天気アイコンを表示
          int icon_code0 = 0xf013; // default: cloudy
          if (id(forecast_day0_condition).state == "sunny") icon_code0 = 0xf00d;
          else if (id(forecast_day0_condition).state == "clear-night") icon_code0 = 0xf02e;
          else if (id(forecast_day0_condition).state == "cloudy") icon_code0 = 0xf013;
          else if (id(forecast_day0_condition).state == "fog") icon_code0 = 0xf014;
          else if (id(forecast_day0_condition).state == "hail") icon_code0 = 0xf015;
          else if (id(forecast_day0_condition).state == "lightning") icon_code0 = 0xf016;
          else if (id(forecast_day0_condition).state == "lightning-rainy") icon_code0 = 0xf01e;
          else if (id(forecast_day0_condition).state == "partlycloudy") icon_code0 = 0xf002;
          else if (id(forecast_day0_condition).state == "pouring") icon_code0 = 0xf018;
          else if (id(forecast_day0_condition).state == "rainy") icon_code0 = 0xf017;
          else if (id(forecast_day0_condition).state == "snowy") icon_code0 = 0xf01b;
          else if (id(forecast_day0_condition).state == "snowy-rainy") icon_code0 = 0xf0b5;
          else if (id(forecast_day0_condition).state == "windy") icon_code0 = 0xf050;
          else if (id(forecast_day0_condition).state == "windy-variant") icon_code0 = 0xf012;
          else if (id(forecast_day0_condition).state == "exceptional") icon_code0 = 0xf056;
          it.print(left_x, 68 + 20, id(weathericon80), id(white), TextAlign::CENTER, utf8_from_code(icon_code0).c_str());
          if (id(forecast_day0_condition_jp).has_state()) {
            it.print(left_x, 152, id(roboto16), id(white), TextAlign::TOP_CENTER, id(forecast_day0_condition_jp).state.c_str());
          }
          it.printf(left_x, 182, id(roboto20), id(white), TextAlign::TOP_CENTER, "%.0f / %.0f ℃", id(forecast_day0_temp_max).state, id(forecast_day0_temp_min).state);
          it.printf(left_x, 218, id(roboto16), id(ha_blue), TextAlign::TOP_CENTER, "☂ %.0f%%", id(forecast_day0_precip_prob).state);

          //day1 明日
          it.print(right_x, 5, id(roboto16), id(white), TextAlign::TOP_CENTER, "Next");

          int icon_code1 = 0xf013; // default: cloudy
          if (id(forecast_day1_condition).state == "sunny") icon_code1 = 0xf00d;
          else if (id(forecast_day1_condition).state == "clear-night") icon_code1 = 0xf02e;
          else if (id(forecast_day1_condition).state == "cloudy") icon_code1 = 0xf013;
          else if (id(forecast_day1_condition).state == "fog") icon_code1 = 0xf014;
          else if (id(forecast_day1_condition).state == "hail") icon_code1 = 0xf015;
          else if (id(forecast_day1_condition).state == "lightning") icon_code1 = 0xf016;
          else if (id(forecast_day1_condition).state == "lightning-rainy") icon_code1 = 0xf01e;
          else if (id(forecast_day1_condition).state == "partlycloudy") icon_code1 = 0xf002;
          else if (id(forecast_day1_condition).state == "pouring") icon_code1 = 0xf018;
          else if (id(forecast_day1_condition).state == "rainy") icon_code1 = 0xf017;
          else if (id(forecast_day1_condition).state == "snowy") icon_code1 = 0xf01b;
          else if (id(forecast_day1_condition).state == "snowy-rainy") icon_code1 = 0xf0b5;
          else if (id(forecast_day1_condition).state == "windy") icon_code1 = 0xf050;
          else if (id(forecast_day1_condition).state == "windy-variant") icon_code1 = 0xf012;
          else if (id(forecast_day1_condition).state == "exceptional") icon_code1 = 0xf056;
          it.print(right_x, 68 + 40, id(weathericon80), id(white), TextAlign::BASELINE_CENTER, utf8_from_code(icon_code1).c_str());

          if (id(forecast_day1_condition_jp).has_state()) {
            it.print(right_x, 152, id(roboto16), id(white), TextAlign::TOP_CENTER, id(forecast_day1_condition_jp).state.c_str());
          }
          it.printf(right_x, 182, id(roboto20), id(white), TextAlign::TOP_CENTER, "%.0f / %.0f ℃", id(forecast_day1_temp_max).state, id(forecast_day1_temp_min).state);
          it.printf(right_x, 218, id(roboto16), id(ha_blue), TextAlign::TOP_CENTER, "☂ %.0f%%", id(forecast_day1_precip_prob).state);

          // 右端に縦書きで 'Weekly' を表示（下端を基準）
          {
            std::string v = "Weekly";
            int sw = it.get_width();
            int sh = it.get_height();
            int x = sw - 6; // 右端からのマージン
            int char_h = 12; // 1文字の垂直スペース（roboto12 想定）
            int y_base = sh - 6; // 下端基準
            for (int i = 0; i < (int)v.length(); i++) {
              char buf[2] = { v[v.length() - 1 - i], '\0' };
              it.print(x, y_base - i * char_h, id(roboto12), id(white), TextAlign::CENTER, buf);
            }
          }

      - id: page3
        lambda: |-
          // helper: 天気conditionからglyphコード取得
          auto get_weather_icon_code = [](text_sensor::TextSensor *condition_sensor) -> int {
            if (!condition_sensor || !condition_sensor->has_state()) return -1;
            std::string condition = condition_sensor->state;
            if (condition == "sunny") return 0xf00d;
            if (condition == "clear-night") return 0xf02e;
            if (condition == "cloudy") return 0xf013;
            if (condition == "partlycloudy") return 0xf002;
            if (condition == "rainy") return 0xf017;
            if (condition == "pouring") return 0xf018;
            if (condition == "lightning-rainy") return 0xf01e;
            if (condition == "snowy") return 0xf01b;
            if (condition == "snowy-rainy") return 0xf0b5;
            if (condition == "windy" || condition == "windy-variant") return 0xf012;
            if (condition == "fog") return 0xf014;
            if (condition == "hail") return 0xf015;
            if (condition == "lightning") return 0xf016;
            if (condition == "exceptional") return 0xf056;
            return 0xf013; // default
          };

          // helper: codepoint -> UTF8 (小さなユーティリティ)
          auto utf8_from_code_local = [](int cp, char *buf, int buflen) {
            int p = 0;
            if (cp <= 0x7F) {
              if (p < buflen-1) buf[p++] = (char)cp;
            } else if (cp <= 0x7FF) {
              if (p < buflen-2) { buf[p++] = 0xC0 | ((cp >> 6) & 0x1F); buf[p++] = 0x80 | (cp & 0x3F); }
            } else if (cp <= 0xFFFF) {
              if (p < buflen-3) { buf[p++] = 0xE0 | ((cp >> 12) & 0x0F); buf[p++] = 0x80 | ((cp >> 6) & 0x3F); buf[p++] = 0x80 | (cp & 0x3F); }
            } else {
              if (p < buflen-4) { buf[p++] = 0xF0 | ((cp >> 18) & 0x07); buf[p++] = 0x80 | ((cp >> 12) & 0x3F); buf[p++] = 0x80 | ((cp >> 6) & 0x3F); buf[p++] = 0x80 | (cp & 0x3F); }
            }
            buf[p] = '\0';
          };

          const int cols = 3;
          const int rows = 2;
          const int items = 6; // forecast_day2..7
          const int screen_w2 = it.get_width();
          const int screen_h2 = it.get_height();
          const int col_w2 = screen_w2 / cols;
          const int margin = 5;
          const int row_h2 = (screen_h2 - margin - margin) / rows;

          const char* wdays[] = {"日","月","火","水","木","金","土"};
          time_t now = time(nullptr);

          for (int pos = 0; pos < items; pos++) {
            int idx = pos + 2;
            int col = pos % cols;
            int row = pos / cols;
            int center_x = col * col_w2 + col_w2 / 2;
            int wlabel_y = margin + row * row_h2 + row * 6;
            int icon_bottom_y = wlabel_y + 12 + 10 + 40;

            text_sensor::TextSensor *cond_sensor = nullptr;
            text_sensor::TextSensor *condjp_sensor = nullptr;
            float temp_max = 0, temp_min = 0, precip_prob = 0;
            switch (idx) {
              case 2: cond_sensor = id(forecast_day2_condition); condjp_sensor = id(forecast_day2_condition_jp); temp_max = id(forecast_day2_temp_max).state; temp_min = id(forecast_day2_temp_min).state; precip_prob = id(forecast_day2_precip_prob).state; break;
              case 3: cond_sensor = id(forecast_day3_condition); condjp_sensor = id(forecast_day3_condition_jp); temp_max = id(forecast_day3_temp_max).state; temp_min = id(forecast_day3_temp_min).state; precip_prob = id(forecast_day3_precip_prob).state; break;
              case 4: cond_sensor = id(forecast_day4_condition); condjp_sensor = id(forecast_day4_condition_jp); temp_max = id(forecast_day4_temp_max).state; temp_min = id(forecast_day4_temp_min).state; precip_prob = id(forecast_day4_precip_prob).state; break;
              case 5: cond_sensor = id(forecast_day5_condition); condjp_sensor = id(forecast_day5_condition_jp); temp_max = id(forecast_day5_temp_max).state; temp_min = id(forecast_day5_temp_min).state; precip_prob = id(forecast_day5_precip_prob).state; break;
              case 6: cond_sensor = id(forecast_day6_condition); condjp_sensor = id(forecast_day6_condition_jp); temp_max = id(forecast_day6_temp_max).state; temp_min = id(forecast_day6_temp_min).state; precip_prob = id(forecast_day6_precip_prob).state; break;
              case 7: cond_sensor = id(forecast_day7_condition); condjp_sensor = id(forecast_day7_condition_jp); temp_max = id(forecast_day7_temp_max).state; temp_min = id(forecast_day7_temp_min).state; precip_prob = id(forecast_day7_precip_prob).state; break;
              default: break;
            }

            time_t t2 = now + (idx) * 24 * 60 * 60;
            struct tm tm2 = *localtime(&t2);
            const char* wlabel = wdays[tm2.tm_wday];

            it.print(center_x - 40, wlabel_y, id(roboto12), id(white), TextAlign::TOP_LEFT, wlabel);
            if (condjp_sensor && condjp_sensor->has_state()) {
              it.print(center_x + 40, wlabel_y, id(roboto12), id(white), TextAlign::TOP_RIGHT, condjp_sensor->state.c_str());
            }

            int icon_code = get_weather_icon_code(cond_sensor);
            if (icon_code == -1) {
              it.print(center_x, icon_bottom_y - 10, id(roboto20), id(white), TextAlign::BASELINE_CENTER, "?");
            } else {
              char icon_utf8b[5] = {0};
              utf8_from_code_local(icon_code, icon_utf8b, sizeof(icon_utf8b));
              it.print(center_x, icon_bottom_y , id(weathericon40), id(white), TextAlign::BASELINE_CENTER, icon_utf8b);
            }

            it.printf(center_x, icon_bottom_y + 10, id(roboto14), id(white), TextAlign::TOP_CENTER, "%.0f/%.0f℃", temp_max, temp_min);
            it.printf(center_x, icon_bottom_y + 30, id(roboto12), id(ha_blue), TextAlign::TOP_CENTER, "☂%.0f%%", precip_prob);
          }

          // 左端に縦書きで 'Back'
          {
            std::string v = "Back";
            int sh = it.get_height();
            int x = 6;
            int char_h = 12;
            int y_base = sh - 6;
            for (int i = 0; i < (int)v.length(); i++) {
              char buf[2] = { v[v.length() - 1 - i], '\0' };
              it.print(x, y_base - i * char_h, id(roboto12), id(white), TextAlign::CENTER, buf);
            }
          }

###Fonts
font:
  - file:
      type: gfonts
      family: BIZ+UDPGothic
      italic : false
      weight: 400
    id: roboto16
    size: 16
    glyphsets:
      - GF_Latin_Core
    glyphs:
      - "%" # パーセント
      - "快晴(夜)曇霧雹雷雨一全部豪雪みぞれ強風異常気象不明降水確率り" # 日本語の天気名
      - "TodayNext" # ラベル
      - "0123456789" # 数字
      - " /" # スラッシュと半角スペース
      - "☂" # 傘マーク (U+2602)

  - file:
      type: gfonts
      family: BIZ+UDPGothic
      weight: 400
    id: roboto20
    size: 20
    glyphsets:
      - GF_Latin_Core
    glyphs:
      - "0123456789" # 数字
      - "%"
      - " "
      - "/"
      - "℃"

  - file:
      type: gfonts
      family: BIZ+UDPGothic
      weight: 400
    id: roboto12
    size: 12
    glyphs:
      - "0123456789" # 数字
      - "%"
      - "/"
      - " "
      - "℃"
      - "☂" # 傘マーク (U+2602)
      - "日月火水木金土" # 曜日漢字
      - "快晴(夜)曇霧雹雷雨一全部豪雪みぞれ強風異常気象不明降確率り" # 日本語の天気名
      - "WeklyBac"

  - file:
      type: gfonts
      family: BIZ+UDPGothic
      weight: 400
    id: roboto14
    size: 14
    glyphs:
      - "0123456789" # 数字
      - "%"
      - " "
      - "/"
      - "℃"
      - "☂" # 傘マーク (U+2602)

    #天気アイコンフォント
  - file: "https://github.com/erikflowers/weather-icons/raw/master/font/weathericons-regular-webfont.ttf"
    id: weathericon40
    size: 40
    glyphs:
      - "\uf00d"  # sunny
      - "\uf02e"  # clear-night
      - "\uf013"  # cloudy
      - "\uf014"  # fog
      - "\uf015"  # hail
      - "\uf016"  # lightning
      - "\uf01e"  # lightning-rainy
      - "\uf002"  # partlycloudy
      - "\uf018"  # pouring
      - "\uf017"  # rainy
      - "\uf01b"  # snowy
      - "\uf0b5"  # snowy-rainy
      - "\uf050"  # windy
      - "\uf012"  # windy-variant
      - "\uf056"  # exceptional
  - file: "https://github.com/erikflowers/weather-icons/raw/master/font/weathericons-regular-webfont.ttf"
    id: weathericon80
    size: 80
    glyphs:
      - "\uf00d"  # sunny
      - "\uf02e"  # clear-night
      - "\uf013"  # cloudy
      - "\uf014"  # fog
      - "\uf015"  # hail
      - "\uf016"  # lightning
      - "\uf01e"  # lightning-rainy
      - "\uf002"  # partlycloudy
      - "\uf018"  # pouring
      - "\uf017"  # rainy
      - "\uf01b"  # snowy
      - "\uf0b5"  # snowy-rainy
      - "\uf050"  # windy
      - "\uf012"  # windy-variant
      - "\uf056"  # exceptional

###Global Variables
globals:
  - id: touch_x_val
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: touch_y_val
    type: float
    restore_value: no
    initial_value: '0.0'


###Sensors（Home Assistantから取得した予報データをESPhomeで利用する）
sensor:
  # Day0
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_temp_max
    id: forecast_day0_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_temp_min
    id: forecast_day0_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_humidity
    id: forecast_day0_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_precip_prob
    id: forecast_day0_precip_prob
  # Day1
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_temp_max
    id: forecast_day1_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_temp_min
    id: forecast_day1_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_humidity
    id: forecast_day1_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_precip_prob
    id: forecast_day1_precip_prob
  # Day2
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_temp_max
    id: forecast_day2_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_temp_min
    id: forecast_day2_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_humidity
    id: forecast_day2_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_precip_prob
    id: forecast_day2_precip_prob
  # Day3
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_temp_max
    id: forecast_day3_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_temp_min
    id: forecast_day3_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_humidity
    id: forecast_day3_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_precip_prob
    id: forecast_day3_precip_prob
  # Day4
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_temp_max
    id: forecast_day4_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_temp_min
    id: forecast_day4_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_humidity
    id: forecast_day4_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_precip_prob
    id: forecast_day4_precip_prob
  # Day5
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_temp_max
    id: forecast_day5_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_temp_min
    id: forecast_day5_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_humidity
    id: forecast_day5_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_precip_prob
    id: forecast_day5_precip_prob
  # Day6
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_temp_max
    id: forecast_day6_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_temp_min
    id: forecast_day6_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_humidity
    id: forecast_day6_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_precip_prob
    id: forecast_day6_precip_prob
  # Day7
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_temp_max
    id: forecast_day7_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_temp_min
    id: forecast_day7_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_humidity
    id: forecast_day7_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_precip_prob
    id: forecast_day7_precip_prob

###Text Sensor（天候名など文字列のデータ）
text_sensor:
  # Day0
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_condition
    id: forecast_day0_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_condition_jp
    id: forecast_day0_condition_jp
  # Day1
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_condition
    id: forecast_day1_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_condition_jp
    id: forecast_day1_condition_jp
  # Day2
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_condition
    id: forecast_day2_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_condition_jp
    id: forecast_day2_condition_jp
  # Day3
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_condition
    id: forecast_day3_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_condition_jp
    id: forecast_day3_condition_jp
  # Day4
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_condition
    id: forecast_day4_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_condition_jp
    id: forecast_day4_condition_jp
  # Day5
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_condition
    id: forecast_day5_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_condition_jp
    id: forecast_day5_condition_jp
  # Day6
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_condition
    id: forecast_day6_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_condition_jp
    id: forecast_day6_condition_jp
  # Day7
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_condition
    id: forecast_day7_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_condition_jp
    id: forecast_day7_condition_jp

###Touch Screens
touchscreen:
  - id: !extend hw_main_touch
    transform:
      swap_xy: true
      mirror_x: false
      mirror_y: false
    on_touch:
      lambda: |-
        id(touch_x_val) = touch.x;
        id(touch_y_val) = touch.y;
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d", touch.x, touch.y, touch.x_raw, touch.y_raw);
        // 画面の左右1/3をタッチしたらページ切替
        int w = id(hw_main_display).get_width();
        if (touch.x > (w * 2 / 3)) {
          // 右1/3 → page3
          id(hw_main_display).show_page(id(page3));
        } else if (touch.x < (w / 3)) {
          // 左1/3 → page2
          id(hw_main_display).show_page(id(page2));
        }
    on_release:
      lambda: |-
        []() {
        };

