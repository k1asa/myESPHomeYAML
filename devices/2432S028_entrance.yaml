#####Substitutions#####
substitutions:
  name: esphome-web-73df2c
  friendly_name: ESPHome 2432S028 73df2c 玄関
###############

#####Basic#####
esphome:
  name: ${name}
  friendly_name: ${friendly_name}

# 共通WiFi設定
<<: !include ../common/wifi.yaml

#####Custom#####
<<: !include ../common/2432s028.yaml

###Colors
color:
  - id: ha_blue
    hex: 51c0f2
  - id: red
    red: 100%
  - id: blue
    blue: 100%
  - id: green
    green: 100%
  - id: white
    red: 100%
    green: 100%
    blue: 100%
  - id: black
    red: 0%
    green: 0%
    blue: 0%
  - id: yellow
    red: 100%
    green: 100%
    blue: 0%

###Displays
display:
  - <<: !include ../common/2432s028_display.yaml
    rotation: 0
    pages:
      - id: page1
        lambda: |-
          it.rectangle(0, 0, 320, 240, id(blue));
          it.print(it.get_width() / 2, 100, id(roboto20), id(white), TextAlign::BOTTOM_CENTER, "Hello World!");
          it.printf(it.get_width() / 2, 140, id(roboto20), id(green), TextAlign::TOP_CENTER, "Touch X: %.0f", id(touch_x_val));
          it.printf(it.get_width() / 2, 160, id(roboto20), id(red), TextAlign::TOP_CENTER, "Touch Y: %.0f", id(touch_y_val));
          it.filled_circle(id(touch_x_val), id(touch_y_val), 10, id(yellow));
          
      - id: page2
        lambda: |-
          //day0 今日
          it.line(160, 20, 160, 220, id(white));
          it.print(80, 15, id(roboto16), id(white), TextAlign::TOP_CENTER, "Today");

          // 天気conditionからglyphコードを決定
          int icon_code0 = 0xf013; // default: cloudy
          if (id(forecast_day0_condition).state == "sunny") icon_code0 = 0xf00d;
          else if (id(forecast_day0_condition).state == "clear-night") icon_code0 = 0xf02e;
          else if (id(forecast_day0_condition).state == "cloudy") icon_code0 = 0xf013;
          else if (id(forecast_day0_condition).state == "fog") icon_code0 = 0xf014;
          else if (id(forecast_day0_condition).state == "hail") icon_code0 = 0xf015;
          else if (id(forecast_day0_condition).state == "lightning") icon_code0 = 0xf016;
          else if (id(forecast_day0_condition).state == "lightning-rainy") icon_code0 = 0xf01e;
          else if (id(forecast_day0_condition).state == "partlycloudy") icon_code0 = 0xf002;
          else if (id(forecast_day0_condition).state == "pouring") icon_code0 = 0xf018;
          else if (id(forecast_day0_condition).state == "rainy") icon_code0 = 0xf017;
          else if (id(forecast_day0_condition).state == "snowy") icon_code0 = 0xf01b;
          else if (id(forecast_day0_condition).state == "snowy-rainy") icon_code0 = 0xf0b5;
          else if (id(forecast_day0_condition).state == "windy") icon_code0 = 0xf050;
          else if (id(forecast_day0_condition).state == "windy-variant") icon_code0 = 0xf012;
          else if (id(forecast_day0_condition).state == "exceptional") icon_code0 = 0xf056;
          // icon_code0 is a Unicode codepoint; encode to UTF-8 and print to avoid %c garbling
          {
            char icon_utf8[5] = {0};
            int cp = icon_code0;
            if (cp <= 0x7F) {
              icon_utf8[0] = cp;
            } else if (cp <= 0x7FF) {
              icon_utf8[0] = 0xC0 | ((cp >> 6) & 0x1F);
              icon_utf8[1] = 0x80 | (cp & 0x3F);
            } else if (cp <= 0xFFFF) {
              icon_utf8[0] = 0xE0 | ((cp >> 12) & 0x0F);
              icon_utf8[1] = 0x80 | ((cp >> 6) & 0x3F);
              icon_utf8[2] = 0x80 | (cp & 0x3F);
            } else {
              icon_utf8[0] = 0xF0 | ((cp >> 18) & 0x07);
              icon_utf8[1] = 0x80 | ((cp >> 12) & 0x3F);
              icon_utf8[2] = 0x80 | ((cp >> 6) & 0x3F);
              icon_utf8[3] = 0x80 | (cp & 0x3F);
            }
            it.print(40, 40, id(weathericon80), id(white), TextAlign::TOP_CENTER, icon_utf8);
          }

          if (id(forecast_day0_condition_jp).has_state()) {
            it.print(80, 120, id(roboto16), id(white), TextAlign::TOP_CENTER, id(forecast_day0_condition_jp).state.c_str());
          }
          it.printf(80, 150, id(roboto20), id(white), TextAlign::TOP_CENTER, "%.0f / %.0f ℃", id(forecast_day0_temp_max).state, id(forecast_day0_temp_min).state);
          it.printf(80, 185, id(roboto16), id(white), TextAlign::TOP_CENTER, "降水確率%.0f%%", id(forecast_day0_precip_prob).state);

          //day1 明日
          it.print(240, 15, id(roboto16), id(white), TextAlign::TOP_CENTER, "Next");

          int icon_code1 = 0xf013; // default: cloudy
          if (id(forecast_day1_condition).state == "sunny") icon_code1 = 0xf00d;
          else if (id(forecast_day1_condition).state == "clear-night") icon_code1 = 0xf02e;
          else if (id(forecast_day1_condition).state == "cloudy") icon_code1 = 0xf013;
          else if (id(forecast_day1_condition).state == "fog") icon_code1 = 0xf014;
          else if (id(forecast_day1_condition).state == "hail") icon_code1 = 0xf015;
          else if (id(forecast_day1_condition).state == "lightning") icon_code1 = 0xf016;
          else if (id(forecast_day1_condition).state == "lightning-rainy") icon_code1 = 0xf01e;
          else if (id(forecast_day1_condition).state == "partlycloudy") icon_code1 = 0xf002;
          else if (id(forecast_day1_condition).state == "pouring") icon_code1 = 0xf018;
          else if (id(forecast_day1_condition).state == "rainy") icon_code1 = 0xf017;
          else if (id(forecast_day1_condition).state == "snowy") icon_code1 = 0xf01b;
          else if (id(forecast_day1_condition).state == "snowy-rainy") icon_code1 = 0xf0b5;
          else if (id(forecast_day1_condition).state == "windy") icon_code1 = 0xf050;
          else if (id(forecast_day1_condition).state == "windy-variant") icon_code1 = 0xf012;
          else if (id(forecast_day1_condition).state == "exceptional") icon_code1 = 0xf056;
          // encode icon_code1 to UTF-8 and print
          {
            char icon_utf8[5] = {0};
            int cp = icon_code1;
            if (cp <= 0x7F) {
              icon_utf8[0] = cp;
            } else if (cp <= 0x7FF) {
              icon_utf8[0] = 0xC0 | ((cp >> 6) & 0x1F);
              icon_utf8[1] = 0x80 | (cp & 0x3F);
            } else if (cp <= 0xFFFF) {
              icon_utf8[0] = 0xE0 | ((cp >> 12) & 0x0F);
              icon_utf8[1] = 0x80 | ((cp >> 6) & 0x3F);
              icon_utf8[2] = 0x80 | (cp & 0x3F);
            } else {
              icon_utf8[0] = 0xF0 | ((cp >> 18) & 0x07);
              icon_utf8[1] = 0x80 | ((cp >> 12) & 0x3F);
              icon_utf8[2] = 0x80 | ((cp >> 6) & 0x3F);
              icon_utf8[3] = 0x80 | (cp & 0x3F);
            }
            it.print(200, 40, id(weathericon80), id(white), TextAlign::TOP_CENTER, icon_utf8);
          }

          if (id(forecast_day1_condition_jp).has_state()) {
            it.print(240, 120, id(roboto16), id(white), TextAlign::TOP_CENTER, id(forecast_day1_condition_jp).state.c_str());
          }
          it.printf(240, 150, id(roboto20), id(white), TextAlign::TOP_CENTER, "%.0f / %.0f ℃", id(forecast_day1_temp_max).state, id(forecast_day1_temp_min).state);
          it.printf(240, 185, id(roboto16), id(white), TextAlign::TOP_CENTER, "降水確率%.0f%%", id(forecast_day1_precip_prob).state);

      - id: page3
        lambda: |-
          // 天気conditionからglyphコード取得関数
          auto get_weather_icon_code = [](text_sensor::TextSensor *condition_sensor) -> int {
            if (!condition_sensor->has_state()) return -1;
            std::string condition = condition_sensor->state;
            if (condition == "sunny") return 0xf00d;
            else if (condition == "clear-night") return 0xf02e;
            else if (condition == "cloudy") return 0xf013;
            else if (condition == "partlycloudy") return 0xf002;
            else if (condition == "rainy") return 0xf017;
            else if (condition == "pouring") return 0xf018;
            else if (condition == "lightning-rainy") return 0xf01e;
            else if (condition == "snowy") return 0xf01b;
            else if (condition == "snowy-rainy") return 0xf0b5;
            else if (condition == "windy" || condition == "windy-variant") return 0xf012;
            else if (condition == "fog") return 0xf014;
            else if (condition == "hail") return 0xf015;
            else if (condition == "lightning") return 0xf016;
            else if (condition == "exceptional") return 0xf056;
            else return 0xf013; // default: cloudy
          };

          const int count = 6;
          const int screen_w = it.get_width();
          const int screen_h = it.get_height();
          const int col_w = screen_w / count;

          const int icon_y    = 20;
          const int temp_y    = 70;
          const int humid_y   = 100;

          for (int idx = 2; idx < 8; idx++) {
            int col = idx - 2;
            int center_x = col * col_w + col_w / 2;

            text_sensor::TextSensor *cond_sensor = nullptr;
            float temp_max = 0, temp_min = 0, humidity = 0;

            switch (idx) {
              case 2: cond_sensor = id(forecast_day2_condition);
                      temp_max = id(forecast_day2_temp_max).state;
                      temp_min = id(forecast_day2_temp_min).state;
                      humidity = id(forecast_day2_humidity).state;
                      break;
              case 3: cond_sensor = id(forecast_day3_condition);
                      temp_max = id(forecast_day3_temp_max).state;
                      temp_min = id(forecast_day3_temp_min).state;
                      humidity = id(forecast_day3_humidity).state;
                      break;
              case 4: cond_sensor = id(forecast_day4_condition);
                      temp_max = id(forecast_day4_temp_max).state;
                      temp_min = id(forecast_day4_temp_min).state;
                      humidity = id(forecast_day4_humidity).state;
                      break;
              case 5: cond_sensor = id(forecast_day5_condition);
                      temp_max = id(forecast_day5_temp_max).state;
                      temp_min = id(forecast_day5_temp_min).state;
                      humidity = id(forecast_day5_humidity).state;
                      break;
              case 6: cond_sensor = id(forecast_day6_condition);
                      temp_max = id(forecast_day6_temp_max).state;
                      temp_min = id(forecast_day6_temp_min).state;
                      humidity = id(forecast_day6_humidity).state;
                      break;
              case 7: cond_sensor = id(forecast_day7_condition);
                      temp_max = id(forecast_day7_temp_max).state;
                      temp_min = id(forecast_day7_temp_min).state;
                      humidity = id(forecast_day7_humidity).state;
                      break;
            }

            // it.printfでweathericon40フォントを使って天気アイコン表示
            int icon_code = get_weather_icon_code(cond_sensor);
            if (icon_code == -1) {
              it.print(center_x, icon_y + 40, id(roboto20), id(white), TextAlign::CENTER, "?");
            } else {
              // encode icon_code to UTF-8 and print (avoid %c garble)
              {
                char icon_utf8[5] = {0};
                int cp = icon_code;
                if (cp <= 0x7F) {
                  icon_utf8[0] = cp;
                } else if (cp <= 0x7FF) {
                  icon_utf8[0] = 0xC0 | ((cp >> 6) & 0x1F);
                  icon_utf8[1] = 0x80 | (cp & 0x3F);
                } else if (cp <= 0xFFFF) {
                  icon_utf8[0] = 0xE0 | ((cp >> 12) & 0x0F);
                  icon_utf8[1] = 0x80 | ((cp >> 6) & 0x3F);
                  icon_utf8[2] = 0x80 | (cp & 0x3F);
                } else {
                  icon_utf8[0] = 0xF0 | ((cp >> 18) & 0x07);
                  icon_utf8[1] = 0x80 | ((cp >> 12) & 0x3F);
                  icon_utf8[2] = 0x80 | ((cp >> 6) & 0x3F);
                  icon_utf8[3] = 0x80 | (cp & 0x3F);
                }
                it.print(center_x, icon_y, id(weathericon40), id(white), TextAlign::TOP_CENTER, icon_utf8);
              }
            }

            // 気温・湿度表示
            it.printf(center_x, temp_y, id(roboto14), id(white), TextAlign::TOP_CENTER, "%.0f/%.0f℃", temp_max, temp_min);
            it.printf(center_x, humid_y, id(roboto12), id(white), TextAlign::TOP_CENTER, "%.0f%%", humidity);
          }

###Fonts
font:
  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 300
    id: roboto16
    size: 16
    glyphsets:
      - GF_Latin_Core
    glyphs:
      - "%" # パーセント
      - "快晴(夜)曇霧雹雷雨一全部豪雪みぞれ強風異常気象不明降水確率" # 日本語の天気名
      - "TodayNext" # ラベル
      - "0123456789" # 数字
      - " /" # スラッシュと半角スペース

  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 400
    id: roboto20
    size: 20
    glyphsets:
      - GF_Latin_Core
    glyphs:
      - "0123456789" # 数字
      - "%"
      - "/"
      - "℃"

  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 300
    id: roboto12
    size: 12
    glyphs:
      - "0123456789" # 数字
      - "%"
      - "/"
      - "℃"

  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 300
    id: roboto14
    size: 14
    glyphs:
      - "0123456789" # 数字
      - "%"
      - "/"
      - "℃"

    #天気アイコンフォント
  - file: "https://github.com/erikflowers/weather-icons/raw/master/font/weathericons-regular-webfont.ttf"
    id: weathericon40
    size: 40
    glyphs:
      - "\uf00d"  # sunny
      - "\uf02e"  # clear-night
      - "\uf013"  # cloudy
      - "\uf014"  # fog
      - "\uf015"  # hail
      - "\uf016"  # lightning
      - "\uf01e"  # lightning-rainy
      - "\uf002"  # partlycloudy
      - "\uf018"  # pouring
      - "\uf017"  # rainy
      - "\uf01b"  # snowy
      - "\uf0b5"  # snowy-rainy
      - "\uf050"  # windy
      - "\uf012"  # windy-variant
      - "\uf056"  # exceptional
  - file: "https://github.com/erikflowers/weather-icons/raw/master/font/weathericons-regular-webfont.ttf"
    id: weathericon80
    size: 80
    glyphs:
      - "\uf00d"  # sunny
      - "\uf02e"  # clear-night
      - "\uf013"  # cloudy
      - "\uf014"  # fog
      - "\uf015"  # hail
      - "\uf016"  # lightning
      - "\uf01e"  # lightning-rainy
      - "\uf002"  # partlycloudy
      - "\uf018"  # pouring
      - "\uf017"  # rainy
      - "\uf01b"  # snowy
      - "\uf0b5"  # snowy-rainy
      - "\uf050"  # windy
      - "\uf012"  # windy-variant
      - "\uf056"  # exceptional

###Global Variables
globals:
  - id: touch_x_val
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: touch_y_val
    type: float
    restore_value: no
    initial_value: '0.0'

###Interval
interval:
  - interval: 5s # 5秒間隔で実行
    then:
      # main_displayの次のページを表示します (最後まで行ったら自動で先頭に戻ります)
      - display.page.show_next: main_display

###Sensors（Home Assistantから取得した予報データをESPhomeで利用する）
sensor:
  # Day0
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_temp_max
    id: forecast_day0_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_temp_min
    id: forecast_day0_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_humidity
    id: forecast_day0_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_precip_prob
    id: forecast_day0_precip_prob
  # Day1
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_temp_max
    id: forecast_day1_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_temp_min
    id: forecast_day1_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_humidity
    id: forecast_day1_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_precip_prob
    id: forecast_day1_precip_prob
  # Day2
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_temp_max
    id: forecast_day2_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_temp_min
    id: forecast_day2_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_humidity
    id: forecast_day2_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_precip_prob
    id: forecast_day2_precip_prob
  # Day3
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_temp_max
    id: forecast_day3_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_temp_min
    id: forecast_day3_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_humidity
    id: forecast_day3_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_precip_prob
    id: forecast_day3_precip_prob
  # Day4
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_temp_max
    id: forecast_day4_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_temp_min
    id: forecast_day4_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_humidity
    id: forecast_day4_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_precip_prob
    id: forecast_day4_precip_prob
  # Day5
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_temp_max
    id: forecast_day5_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_temp_min
    id: forecast_day5_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_humidity
    id: forecast_day5_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_precip_prob
    id: forecast_day5_precip_prob
  # Day6
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_temp_max
    id: forecast_day6_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_temp_min
    id: forecast_day6_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_humidity
    id: forecast_day6_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_precip_prob
    id: forecast_day6_precip_prob
  # Day7
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_temp_max
    id: forecast_day7_temp_max
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_temp_min
    id: forecast_day7_temp_min
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_humidity
    id: forecast_day7_humidity
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_precip_prob
    id: forecast_day7_precip_prob

###Text Sensor（天候名など文字列のデータ）
text_sensor:
  # Day0
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_condition
    id: forecast_day0_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_0_condition_jp
    id: forecast_day0_condition_jp
  # Day1
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_condition
    id: forecast_day1_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_1_condition_jp
    id: forecast_day1_condition_jp
  # Day2
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_condition
    id: forecast_day2_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_2_condition_jp
    id: forecast_day2_condition_jp
  # Day3
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_condition
    id: forecast_day3_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_3_condition_jp
    id: forecast_day3_condition_jp
  # Day4
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_condition
    id: forecast_day4_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_4_condition_jp
    id: forecast_day4_condition_jp
  # Day5
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_condition
    id: forecast_day5_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_5_condition_jp
    id: forecast_day5_condition_jp
  # Day6
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_condition
    id: forecast_day6_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_6_condition_jp
    id: forecast_day6_condition_jp
  # Day7
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_condition
    id: forecast_day7_condition
  - platform: homeassistant
    entity_id: sensor.forecast_day_7_condition_jp
    id: forecast_day7_condition_jp

###Touch Screens
touchscreen:
  - <<: !include ../common/2432s028_touch.yaml
    on_touch:
      lambda: |-
        id(touch_x_val) = touch.x;
        id(touch_y_val) = touch.y;
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d", touch.x, touch.y, touch.x_raw, touch.y_raw);
    on_release:
      lambda: |-
        []() {
        };

###############
