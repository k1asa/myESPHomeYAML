#####Substitutions#####
substitutions:
  name: esphome-web-73df2c
  friendly_name: ESPHome 2432S028 73df2c 玄関
###############

#####Basic#####
esphome:
  name: ${name}
  friendly_name: ${friendly_name}

# 共通WiFi設定
<<: !include ../common/wifi.yaml

#esp32:
#  framework:
#    type: arduino


# Allow Over-The-Air updates
#ota:
#- platform: esphome
###############


#####Custom#####
<<: !include ../common/2432s028.yaml

###Colors
color:
  - id: ha_blue
    hex: 51c0f2
  - id: red
    red: 100%
  - id: blue
    blue: 100%
  - id: green
    green: 100%
  - id: white
    red: 100%
    green: 100%
    blue: 100%
  - id: black
    red: 0%
    green: 0%
    blue: 0%
  - id: yellow
    red: 100%
    green: 100%
    blue: 0%

###Displays
###縦置き横置きなどはrotationを変更
display:
  - <<: !include ../common/2432s028_display.yaml
    rotation: 0°
    pages:
      - id: page1
        lambda: |-
          it.rectangle(0, 0, 320, 240, id(blue));
          it.print(it.get_width() / 2, 100, id(roboto20), id(white), TextAlign::BOTTOM_CENTER, "Hello World!");
          
          it.printf(it.get_width() / 2, 140, id(roboto20), id(green), TextAlign::TOP_CENTER, "Touch X: %.0f", id(touch_x_val));
          it.printf(it.get_width() / 2, 160, id(roboto20), id(red), TextAlign::TOP_CENTER, "Touch Y: %.0f", id(touch_y_val));
          it.filled_circle(id(touch_x_val), id(touch_y_val), 10, id(yellow));
      - id: page2
        lambda: |-
          auto draw_weather_icon = [&](int x, int y, text_sensor::TextSensor *condition_sensor) {
            // センサーがまだ値を受信していない場合に備える
            if (!condition_sensor->has_state()) {
              it.print(x + 40, y + 40, id(roboto20), id(white), TextAlign::CENTER, "?");
              return;
            }
            std::string condition = condition_sensor->state;
            if (condition == "sunny") { it.image(x, y, id(weather_sunny)); }
            else if (condition == "clear-night") { it.image(x, y, id(weather_clear_night)); }
            else if (condition == "cloudy") { it.image(x, y, id(weather_cloudy)); }
            else if (condition == "partlycloudy") { it.image(x, y, id(weather_partlycloudy)); }
            else if (condition == "rainy") { it.image(x, y, id(weather_rainy)); }
            else if (condition == "pouring") { it.image(x, y, id(weather_pouring)); }
            else if (condition == "lightning-rainy") { it.image(x, y, id(weather_lightning_rainy)); }
            else if (condition == "snowy") { it.image(x, y, id(weather_snowy)); }
            else if (condition == "snowy-rainy") { it.image(x, y, id(weather_snowy_rainy)); }
            else if (condition == "windy" || condition == "windy-variant") { it.image(x, y, id(weather_windy_variant)); }
            else if (condition == "fog") { it.image(x, y, id(weather_fog)); }
            else if (condition == "hail") { it.image(x, y, id(weather_hail)); }
            else if (condition == "lightning") { it.image(x, y, id(weather_lightning)); }
            else { it.image(x, y, id(weather_cloudy)); }
          };

          // 画面中央に区切り線を描画
          it.line(160, 20, 160, 220, id(white));

          // --- 今日の天気 (画面左側) ---
          it.print(80, 15, id(roboto16), id(white), TextAlign::TOP_CENTER, "Today");
          draw_weather_icon(40, 40, id(forecast_day0_condition));
          if (id(forecast_day0_condition_jp).has_state()) {
            it.print(80, 120, id(roboto16), id(white), TextAlign::TOP_CENTER, id(forecast_day0_condition_jp).state.c_str());
          }
          it.printf(80, 150, id(roboto20), id(white), TextAlign::TOP_CENTER, "%.0f / %.0f ℃", id(forecast_day0_temp_max).state, id(forecast_day0_temp_min).state);
          it.printf(80, 185, id(roboto16), id(white), TextAlign::TOP_CENTER, "降水確率%.0f%%", id(forecast_day0_precip_prob).state);

          // --- 明日の天気 (画面右側) ---
          it.print(240, 15, id(roboto16), id(white), TextAlign::TOP_CENTER, "Next");
          draw_weather_icon(200, 40, id(forecast_day1_condition));
          if (id(forecast_day1_condition_jp).has_state()) {
            it.print(240, 120, id(roboto16), id(white), TextAlign::TOP_CENTER, id(forecast_day1_condition_jp).state.c_str());
          }
          it.printf(240, 150, id(roboto20), id(white), TextAlign::TOP_CENTER, "%.0f / %.0f ℃", id(forecast_day1_temp_max).state, id(forecast_day1_temp_min).state);
          it.printf(240, 185, id(roboto16), id(white), TextAlign::TOP_CENTER, "降水確率%.0f%%", id(forecast_day1_precip_prob).state);


###Fonts
font:
  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 300
    id: roboto16
    size: 16
    glyphsets:
      - GF_Latin_Core
    glyphs:
      - "%" # パーセント
      - "快晴(夜)曇霧雹雷雨一全部豪雪みぞれ強風異常気象不明降水確率" # 日本語の天気名
      - "TodayNext" # ラベル
      - "0123456789" # 数字
      - " /" # スラッシュと半角スペース

  - file:
      type: gfonts
      family: "M PLUS Rounded 1c"
      weight: 400
    id: roboto20
    size: 20
    glyphsets:
      - GF_Latin_Core
    glyphs:
      - "℃"

###Global Variables
globals:
  - id: touch_x_val
    type: float
    restore_value: no
    initial_value: '0.0'
  - id: touch_y_val
    type: float
    restore_value: no
    initial_value: '0.0'

###Images
image:
  - file: mdi:weather-night   #夜晴れ
    id: weather_clear_night
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-cloudy   #曇り
    id: weather_cloudy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-fog   #霧
    id: weather_fog
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-hail   #雹
    id: weather_hail
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-lightning   #雷
    id: weather_lightning
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-lightning-rainy   #雷雨
    id: weather_lightning_rainy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-partly-cloudy   #部分的に曇り
    id: weather_partlycloudy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-pouring   #土砂降り
    id: weather_pouring
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-rainy   #雨
    id: weather_rainy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-snowy   #雪
    id: weather_snowy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-snowy-rainy   #みぞれ
    id: weather_snowy_rainy
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-sunny   #晴れ
    id: weather_sunny
    type: grayscale
    transparency: alpha_channel
    resize: 80x80
  - file: mdi:weather-windy-variant   #曇りと強風,強風
    id: weather_windy_variant
    type: grayscale
    transparency: alpha_channel
    resize: 80x80

###Interval
interval:
  - interval: 5s # 5秒間隔で実行
    then:
      # main_displayの次のページを表示します (最後まで行ったら自動で先頭に戻ります)
      - display.page.show_next: main_display

# Sensorの共通テンプレート定義
sensor_common: &sensor_common
  platform: homeassistant
  entity_id: sensor.daily_forecast_data
  attribute: forecast_data

# Jinja 定義部（インデントしない）
{% set days = range(0, 7) %}
{% set sensor_defs = [
    {'key':'precip_prob', 'unit':'%',  'common':'sensor_common'},
    {'key':'temp_max',    'unit':'°C', 'common':'sensor_common'},
    {'key':'temp_min',    'unit':'°C', 'common':'sensor_common'},
    {'key':'humidity',    'unit':'%', 'common':'sensor_common'}
] %}
{% set text_defs = [
    {'key':'condition',    'common':'sensor_common'},
    {'key':'condition_jp', 'common':'sensor_common'}
] %}


###Sensors
sensor:
# 数値センサーの自動生成
{% for d in days %}
{% for s in sensor_defs %}
  - <<: *{{ s.common }}
    filters:
      - json:
          path: "$[{{ d }}].{{ s.key }}"
    unit_of_measurement: "{{ s.unit }}"
    id: forecast_day{{ d }}_{{ s.key }}
{% endfor %}
{% endfor %}

###Text Sensor
text_sensor:
# テキストセンサーの自動生成
{% for d in days %}
{% for t in text_defs %}
  - <<: *{{ t.common }}
    filters:
      - json:
          path: "$[{{ d }}].{{ t.key }}"
    id: forecast_day{{ d }}_{{ t.key }}
{% endfor %}
{% endfor %}

###Touch Screens
touchscreen:
  - <<: !include ../common/2432s028_touch.yaml
    on_touch:
      lambda: |-
        id(touch_x_val) = touch.x;
        id(touch_y_val) = touch.y;
        ESP_LOGI("cal", "x=%d, y=%d, x_raw=%d, y_raw=%0d", touch.x, touch.y, touch.x_raw, touch.y_raw);
    on_release:
      lambda: |-
        []() {
        };

###############
